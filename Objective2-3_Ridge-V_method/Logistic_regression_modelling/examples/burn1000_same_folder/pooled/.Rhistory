}
#-----------------------------------------------------------------------------
# c. Node 1: Combine the results to compute V^lambda, send to all nodes
#-----------------------------------------------------------------------------
# Combine all client quantities
exp_all <- exp_client1 * exp_client2 * exp_client3
# Compute matrix V
V = (exp_all/(1+exp_all)) * (1-(exp_all/(1+exp_all)))
V = diag(V[,1])
if(SaveNodes){
# Node 1
write.csv(V, file = "Outputs/Node1/V.csv", row.names = FALSE)
# Node 2
write.csv(V, file = "Outputs/Node2/V.csv", row.names = FALSE)
# Node 3
write.csv(V, file = "Outputs/Node3/V.csv", row.names = FALSE)
}
#-------------------------------------------------------------------------------
# 9. Nodes (all but last): Calculate t(X^(k)) (V^lambda)^(1/2), send to CC.
#-------------------------------------------------------------------------------
# Compute (V^lambda)^(1/2)
sqrtV <- sqrt(V)
# Compute blocks
Block_Client1 <- t(X1_scaled) %*% sqrtV
Block_Client2 <- t(X2_scaled) %*% sqrtV
if(SaveNodes){
# Node 1
write.csv(Block_Client1, file = "Outputs/Node1/Block_Client1.csv", row.names = FALSE)
# Node 2
write.csv(Block_Client2, file = "Outputs/Node2/Block_Client2.csv", row.names = FALSE)
}
if(SaveCC){
# CC
write.csv(Block_Client1, file = "Outputs/Coord/Block_Client1.csv", row.names = FALSE)
write.csv(Block_Client2, file = "Outputs/Coord/Block_Client2.csv", row.names = FALSE)
}
#-------------------------------------------------------------------------------
# 10. Last node: Calculate t[X^(K), 1_n] (V^lambda)^(1/2), send to CC.
# Note: X3_scaled = [scale(X3, 1_n)].
#-------------------------------------------------------------------------------
Block_Client3 <- t(X3_scaled) %*% sqrtV
if(SaveNodes){
# Node 3
write.csv(Block_Client3, file = "Outputs/Node3/Block_Client3.csv", row.names = FALSE)
}
if(SaveCC){
# CC
write.csv(Block_Client3, file = "Outputs/Coord/Block_Client3.csv", row.names = FALSE)
}
#-------------------------------------------------------------------------------
# 11. CC: build t[X, 1_n] V^lambda [X, 1n] by bloc and invert to obtain variance estimates
#-------------------------------------------------------------------------------
# Compute blocks used
Block_1_1 <- Block_Client1 %*% t(Block_Client1)
Block_1_2 <- Block_Client1 %*% t(Block_Client2)
Block_1_3 <- Block_Client1 %*% t(Block_Client3)
Block_2_1 <- Block_Client2 %*% t(Block_Client1)
Block_2_2 <- Block_Client2 %*% t(Block_Client2)
Block_2_3 <- Block_Client2 %*% t(Block_Client3)
Block_3_1 <- Block_Client3 %*% t(Block_Client1)
Block_3_2 <- Block_Client3 %*% t(Block_Client2)
Block_3_3 <- Block_Client3 %*% t(Block_Client3)
# Combine blocks into rows
Row_1 <- cbind(Block_1_1, Block_1_2, Block_1_3)
Row_2 <- cbind(Block_2_1, Block_2_2, Block_2_3)
Row_3 <- cbind(Block_3_1, Block_3_2, Block_3_3)
# Combine rows into matrix
XVX <- rbind(Row_1, Row_2, Row_3)
# Inverse matrix XVX
invXVX <- solve(XVX)
# Compute standard errors from previous matrix
std.error <- sqrt(diag(invXVX))
# Format and save output
beta <- c(beta_node_1, beta_node_2, beta_node_3[-length(beta_node_3)], beta_0)
output <- cbind(beta, std.error)
rownames(output) <- c(colnames(node_data1), colnames(node_data2), colnames(node_data3), "intercept")
write.csv(output, file = "VERTIGO_CI_output.csv", row.names = TRUE)
if(SaveCC){
# CC
write.csv(XVX, file = "Outputs/Coord/XVX.csv", row.names = FALSE)
write.csv(invXVX, file = "Outputs/Coord/invXVX.csv", row.names = FALSE)
write.csv(beta, file = "Outputs/Coord/beta_hat.csv", row.names = FALSE)
}
#==============================================================================================================================================================
# End of "Algorithm 4: VERTIGO-CI Original"
#==============================================================================================================================================================
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI")
############### VERTICALLY DISTRIBUTED LOGISTIC REGRESSION ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Set number of nodes
K <- 3
# If you want to manually set the parameter lambda, specify value here.
# If you do so, please refer to article to ensure adequate settings.
# Else, an automated value that complies with the assumptions of the method will be assigned.
lambda <- 0.2
# No modifications should be required below this point
######################################################
# Allow to set working directory automatically
library(this.path)
# Retrieve current working directory
setwd(this.dir())
examplefilepath <- paste0(getwd(), "/")
# Retrieve source code
setwd("../../example_handler")
source("PoolingOrg_code_log-regV_ex.R")
# Run pooled code
vert_logistic_regression_nonpenalized_example_pooled_handler(man_nnodes = K, man_lambda = lambda, expath = examplefilepath)
## Remove all environment variables.
## If you want to see the variable that were create, simply don't execute that line (and clear them manually after)
rm(list = ls())
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective2-3_OptimizingVERTIGO/Logistic_regression_modelling/examples/burn1000_same_folder/pooled")
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective2-3_OptimizingVERTIGO/Logistic_regression_modelling/examples/burn1000_same_folder/comparator")
# Run VERTIGO-CI
source("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/Run_VERTIGO-CI.R")
setwd(this.dir())
# Run VERTIGO-CI
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
source("Run_VERTIGO-CI.R")
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI")
# Extract coefficients from outputs
read.csv("VERTIGO_CI_outputs.csv")
# Extract coefficients from outputs
read.csv("VERTIGO_CI_output.csv")
# Run RIDGE_V
setwd(this.dir())
# Run RIDGE_V
setwd(this.dir())
setwd("../distributed/")
source("Run_Example.R")
# Load and combine outputs
RidgeV_CC_output <- read.csv("Coord_node_results_distribtued_log_regV.csv")
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective2-3_OptimizingVERTIGO/Logistic_regression_modelling/examples/burn1000_same_folder/comparator")
setwd("../distributed/")
RidgeV_CC_output <- read.csv("Coord_node_results_distribtued_log_regV.csv")
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
RidgeV_Node2_output <- read.csv("Data_node_2_results.csv")
RidgeV_Node3_output <- read.csv("Data_node_3_results.csv")
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective2-3_OptimizingVERTIGO/Logistic_regression_modelling/examples/burn1000_same_folder/comparator")
# Load VERTIGO-CI output
setwd(this.dir)
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
# Load VERTIGO-CI output
setwd(this.dir())
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
VERTIGO_CI_output <- read.csv("VERTIGO_CI_output.csv")
VERTIGO_CI_output
RidgeV_CC_output
RidgeV_Node1_output
RidgeV_Node2_output
RidgeV_output <- rbind(RidgeV_Node1_output, RidgeV_Node1_output, RidgeV_Node1_output)
RidgeV_output
RidgeV_output <- rbind(RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output)
RidgeV_output
VERTIGO_CI_output
RidgeV_CC_output
RidgeV_output <- rbind(RidgeV_Node1_output[,-3], RidgeV_Node2_output[,-3], RidgeV_Node3_output[,-3], c("intercept", RidgeV_CC_output[1,2]))
RidgeV_output
RidgeV_CC_output
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective2-3_OptimizingVERTIGO/Logistic_regression_modelling/examples/burn1000_same_folder/comparator")
# Run glmnet
setwd(this.dir())
############### VERTICALLY DISTRIBUTED LOGISTIC REGRESSION ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Set number of nodes
K <- 3
# If you want to manually set the parameter lambda, specify value here.
# If you do so, please refer to article to ensure adequate settings.
# Else, an automated value that complies with the assumptions of the method will be assigned.
lambda <- 0.2
# No modifications should be required below this point
######################################################
# Allow to set working directory automatically
library(this.path)
# Retrieve current working directory
setwd(this.dir())
examplefilepath <- paste0(getwd(), "/")
# Retrieve source code
setwd("../../example_handler")
source("PoolingOrg_code_log-regV_ex.R")
# Run pooled code
vert_logistic_regression_nonpenalized_example_pooled_handler(man_nnodes = K, man_lambda = lambda, expath = examplefilepath)
## Remove all environment variables.
## If you want to see the variable that were create, simply don't execute that line (and clear them manually after)
rm(list = ls())
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective2-3_OptimizingVERTIGO/Logistic_regression_modelling/examples/burn1000_same_folder/pooled")
############### VERTICALLY DISTRIBUTED LOGISTIC REGRESSION ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Set number of nodes
K <- 3
# If you want to manually set the parameter lambda, specify value here.
# If you do so, please refer to article to ensure adequate settings.
# Else, an automated value that complies with the assumptions of the method will be assigned.
lambda <- 0.2
# No modifications should be required below this point
######################################################
# Allow to set working directory automatically
library(this.path)
# Retrieve current working directory
setwd(this.dir())
examplefilepath <- paste0(getwd(), "/")
# Retrieve source code
setwd("../../example_handler")
source("PoolingOrg_code_log-regV_ex.R")
# Run pooled code
vert_logistic_regression_nonpenalized_example_pooled_handler(man_nnodes = K, man_lambda = lambda, expath = examplefilepath)
## Remove all environment variables.
## If you want to see the variable that were create, simply don't execute that line (and clear them manually after)
rm(list = ls())
############### VERTICALLY DISTRIBUTED LOGISTIC REGRESSION ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Set number of nodes
K <- 3
# If you want to manually set the parameter lambda, specify value here.
# If you do so, please refer to article to ensure adequate settings.
# Else, an automated value that complies with the assumptions of the method will be assigned.
lambda <- 0.2
# No modifications should be required below this point
######################################################
# Allow to set working directory automatically
library(this.path)
# Retrieve current working directory
setwd(this.dir())
examplefilepath <- paste0(getwd(), "/")
# Retrieve source code
setwd("../../example_handler")
source("PoolingOrg_code_log-regV_ex.R")
# Run pooled code
vert_logistic_regression_nonpenalized_example_pooled_handler(man_nnodes = K, man_lambda = lambda, expath = examplefilepath)
View(vert_logistic_regression_nonpenalized_example_pooled_handler)
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective2-3_OptimizingVERTIGO/Logistic_regression_modelling/examples/burn1000_same_folder/comparator")
RidgeV_output <- rbind(RidgeV_Node1_output[,-3], RidgeV_Node2_output[,-3], RidgeV_Node3_output[,-3], c("intercept", RidgeV_CC_output[1,2])) # attention type de données ici
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
# Load and combine outputs
setwd(this.dir())
setwd("../distributed/")
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
RidgeV_Node2_output <- read.csv("Data_node_2_results.csv")
RidgeV_Node3_output <- read.csv("Data_node_3_results.csv")
RidgeV_output <- rbind(RidgeV_Node1_output[,-3], RidgeV_Node2_output[,-3], RidgeV_Node3_output[,-3], c("intercept", RidgeV_CC_output[1,2])) # attention type de données ici
RidgeV_output
VERTIGO_CI_output
# Load VERTIGO-CI output
setwd(this.dir())
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
VERTIGO_CI_output <- read.csv("VERTIGO_CI_output.csv")
VERTIGO_CI_output
RidgeV_output
VERTIGO_CI_output
VERTIGO_CI_output <- VERTIGO_CI_output[,-3]
RidgeV_Node1_output
RidgeV_Node2_output
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
# Load and combine RIDGE-V outputs
setwd(this.dir())
setwd("../distributed/")
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
RidgeV_Node1_output
RidgeV_output <- rbind(RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output, c("intercept", RidgeV_CC_output[1,2])) # attention type de données ici
RidgeV_output
VERTIGO_CI_output
# Run glmnet
setwd(this.dir())
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective2-3_OptimizingVERTIGO/Logistic_regression_modelling/examples/burn1000_same_folder/comparator")
setwd("../pooled/")
source("Run_Pooled_Example.R")
RidgeV_combined_output <- rbind(RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output, c("intercept", RidgeV_CC_output[1,2])) # attention type de données ici
# Load and combine RIDGE-V outputs
setwd(this.dir())
setwd("../distributed/")
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
RidgeV_Node2_output <- read.csv("Data_node_2_results.csv")
RidgeV_Node3_output <- read.csv("Data_node_3_results.csv")
RidgeV_combined_output <- rbind(RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output, c("intercept", RidgeV_CC_output[1,2])) # attention type de données ici
RidgeV_combined_output
RidgeV_combined_output <- rbind(c("intercept", RidgeV_CC_output[1,2]), RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output) # attention type de données ici
RidgeV_combined_output
RidgeV_final_output <- t(RidgeV_combined_output[,2])
RidgeV_final_output
RidgeV_final_output <- t(as.numeric(RidgeV_combined_output[,2]))
RidgeV_final_output
RidgeV_combined_output <- as.data.frame(c("intercept", RidgeV_CC_output[1,2]))
RidgeV_combined_output
RidgeV_combined_output <- as.data.frame(cbind("intercept", RidgeV_CC_output[1,2]))
RidgeV_combined_output
RidgeV_CC_output
RidgeV_combined_output <- as.data.frame(c("intercept"))
RidgeV_CC_output
RidgeV_Node1_output
RidgeV_combined_output <- as.data.frame(c("intercept")) %>%
mutate(betak_hat = RidgeV_CC_output[1,2])
RidgeV_combined_output
View(RidgeV_CC_output)
View(RidgeV_CC_output)
RidgeV_combined_output <- rbind(c("intercept", RidgeV_CC_output[1,2]), RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output) # attention type de données ici
RidgeV_combined_output
RidgeV_Node1_output
RidgeV_Node2_output
RidgeV_CC_output[1,2]
RidgeV_CC_output
RidgeV_CC_output[1,2]
RidgeV_combined_output <- rbind(c("intercept", RidgeV_CC_output[1,2]), RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output) # attention type de données ici
RidgeV_combined_output
RidgeV_CC_output[1,2]
RidgeV_combined_output <- rbind(c("intercept", RidgeV_CC_output[1,2]), RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output) # attention type de données ici
RidgeV_final_output <- t(as.numeric(RidgeV_combined_output[,2]))
RidgeV_final_output
RidgeV_final_output <- t(as.numeric(RidgeV_combined_output[,2], ))
RidgeV_final_output <- t(as.numeric(RidgeV_combined_output[,2]))
RidgeV_final_output
RidgeV_combined_output <- rbind(c("intercept", RidgeV_CC_output[1,2]), RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output) # attention type de données ici
RidgeV_final_output <- t(as.numeric(RidgeV_combined_output[,2]))
RidgeV_final_output
VERTIGO_CI_output
# Load VERTIGO-CI output
setwd(this.dir())
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
VERTIGO_CI_output <- read.csv("VERTIGO_CI_output.csv")
VERTIGO_CI_output <- VERTIGO_CI_output[,-3]
# Load and combine RIDGE-V outputs
setwd(this.dir())
setwd("../distributed/")
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
RidgeV_Node2_output <- read.csv("Data_node_2_results.csv")
RidgeV_Node3_output <- read.csv("Data_node_3_results.csv")
#RidgeV_combined_output <- as.data.frame(c("intercept")) %>%
#  mutate(betak_hat = RidgeV_CC_output[1,2])
RidgeV_combined_output <- rbind(c("intercept", RidgeV_CC_output[1,2]), RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output) # attention type de données ici
VERTIGO_CI_output
RidgeV_combined_output
VERTIGO_CI_output
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI")
# Libraries
library(this.path)
# Run VERTIGO-CI
setwd(this.dir())
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
source("Run_VERTIGO-CI.R")
# Run RIDGE_V
setwd(this.dir())
setwd("../distributed/")
source("Run_Example.R")
# Load VERTIGO-CI output
setwd(this.dir())
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
VERTIGO_CI_output <- read.csv("VERTIGO_CI_output.csv")
VERTIGO_CI_output <- VERTIGO_CI_output[,-3]
# Load and combine RIDGE-V outputs
setwd(this.dir())
setwd("../distributed/")
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
RidgeV_Node2_output <- read.csv("Data_node_2_results.csv")
RidgeV_Node3_output <- read.csv("Data_node_3_results.csv")
RidgeV_combined_output <- rbind(c("intercept", RidgeV_CC_output[1,2]), RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output) # attention type de données ici
VERTIGO_CI_output
RidgeV_combined_output
# Run glmnet
setwd(this.dir())
setwd("../pooled/")
source("Run_Pooled_Example.R")
# Run glmnet
setwd(this.dir())
setwd("../pooled/")
# Run glmnet
setwd(this.dir())
source("PoolingOrg_code_log-regV_ex.R")
# Run glmnet
setwd(this.dir())
setwd("../../example_handler/")
source("PoolingOrg_code_log-regV_ex.R")
vert_logistic_regression_nonpenalized_example_pooled_handler(save_to_csv = TRUE)
vert_logistic_regression_nonpenalized_example_pooled_handler(man_nnodes = 3, save_to_csv = TRUE)
setwd("../../example_handler/")
# Run glmnet
setwd(this.dir())
setwd("../../example_handler/")
# Run glmnet
setwd(this.dir())
setwd("../../example_handler/")
# Run glmnet
setwd(this.dir())
setwd("../../example_handler/")
# Run glmnet
setwd(this.dir())
setwd("../pooled/")
setwd("~/GitHub/Elo_Propre/Revisiting_VERTIGO/Objective2-3_OptimizingVERTIGO/Logistic_regression_modelling/examples/burn1000_same_folder/pooled")
############### VERTICALLY DISTRIBUTED LOGISTIC REGRESSION ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Set number of nodes
K <- 3
# If you want to manually set the parameter lambda, specify value here.
# If you do so, please refer to article to ensure adequate settings.
# Else, an automated value that complies with the assumptions of the method will be assigned.
lambda <- -1
# No modifications should be required below this point
######################################################
# Allow to set working directory automatically
library(this.path)
# Retrieve current working directory
setwd(this.dir())
examplefilepath <- paste0(getwd(), "/")
# Retrieve source code
setwd("../../example_handler")
source("PoolingOrg_code_log-regV_ex.R")
# Run pooled code
vert_logistic_regression_nonpenalized_example_pooled_handler(man_nnodes = K, man_lambda = lambda, expath = examplefilepath, save_to_csv = TRUE)
## Remove all environment variables.
## If you want to see the variable that were create, simply don't execute that line (and clear them manually after)
rm(list = ls())
# Run glmnet
setwd(this.dir())
setwd("../pooled/")
source("Run_Pooled_Example.R")
# Load pooled output
setwd(this.dir())
setwd("../pooled/")
Pooled_output <- read.csv("Pooled_Results_log_regV.csv")
############### VERTICALLY DISTRIBUTED LOGISTIC REGRESSION ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Libraries
library(this.path)
# Run VERTIGO-CI
setwd(this.dir())
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
source("Run_VERTIGO-CI.R")
# Run RIDGE_V
setwd(this.dir())
setwd("../distributed/")
source("Run_Example.R")
# Run glmnet
setwd(this.dir())
setwd("../pooled/")
source("Run_Pooled_Example.R")
# Load VERTIGO-CI output
setwd(this.dir())
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
VERTIGO_CI_output <- read.csv("VERTIGO_CI_output.csv")
VERTIGO_CI_output <- VERTIGO_CI_output[,-3]
# Load and combine RIDGE-V outputs
setwd(this.dir())
setwd("../distributed/")
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
RidgeV_Node2_output <- read.csv("Data_node_2_results.csv")
RidgeV_Node3_output <- read.csv("Data_node_3_results.csv")
RidgeV_combined_output <- rbind(c("intercept", RidgeV_CC_output[1,2]), RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output) # attention type de données ici
# Load pooled output
setwd(this.dir())
setwd("../pooled/")
Pooled_output <- read.csv("Pooled_Results_log_regV.csv")
# Create a single df to compare results
as.data.frame(cbind(VERTIGO_CI_output$beta, RidgeV_combined_output$betak_hat, Pooled_output$x))
colnames(results) <- c("VERTIGO-CI", "Ridge-V", "glmnet")
# Create a single df to compare results
results <- as.data.frame(cbind(VERTIGO_CI_output$beta, RidgeV_combined_output$betak_hat, Pooled_output$x))
colnames(results) <- c("VERTIGO-CI", "Ridge-V", "glmnet")
rownames(results) <- Pooled_output$X
# Print results to console
results
############### VERTICALLY DISTRIBUTED LOGISTIC REGRESSION ####################
## License: https://creativecommons.org/licenses/by-nc-sa/4.0/
## Copyright: GRIIS / Université de Sherbrooke
# Libraries
library(this.path)
# Run VERTIGO-CI
setwd(this.dir())
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
source("Run_VERTIGO-CI.R")
# Run RIDGE_V
setwd(this.dir())
setwd("../distributed/")
source("Run_Example.R")
# Run glmnet
setwd(this.dir())
setwd("../pooled/")
source("Run_Pooled_Example.R")
# Load VERTIGO-CI output
setwd(this.dir())
setwd("../../../../../Objective1_ConfidentialityIssues/Objective1a_VERTIGO-CI/")
VERTIGO_CI_output <- read.csv("VERTIGO_CI_output.csv")
VERTIGO_CI_output <- VERTIGO_CI_output[,-3]
# Load and combine RIDGE-V outputs
setwd(this.dir())
setwd("../distributed/")
RidgeV_CC_output <- read.csv("Coord_node_results_distributed_log_regV.csv")
RidgeV_Node1_output <- read.csv("Data_node_1_results.csv")
RidgeV_Node2_output <- read.csv("Data_node_2_results.csv")
RidgeV_Node3_output <- read.csv("Data_node_3_results.csv")
RidgeV_combined_output <- rbind(c("intercept", RidgeV_CC_output[1,2]), RidgeV_Node1_output, RidgeV_Node2_output, RidgeV_Node3_output) # attention type de données ici
# Load pooled output
setwd(this.dir())
setwd("../pooled/")
Pooled_output <- read.csv("Pooled_Results_log_regV.csv")
# Create a single df to compare results
results <- as.data.frame(cbind(VERTIGO_CI_output$beta, RidgeV_combined_output$betak_hat, Pooled_output$x))
colnames(results) <- c("VERTIGO-CI", "Ridge-V", "glmnet")
rownames(results) <- Pooled_output$X
# Print results to console
results
